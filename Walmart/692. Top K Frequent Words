class cmp{
public:
    bool operator()(const pair<int, string>& a, const pair<int, string>& b) {
        if (a.first == b.first)return a.second < b.second;
        return a.first > b.first;
    }
};


class Solution {
public:
    // bool cmp (pair<int,string>a, pair<int,string>b){
    //     if(a.first==b.first)return a.second<b.second;
    //     return a.first>b.first;
    // }
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int>mymap;

        for(string &i : words){
            mymap[i]++;
        }

  
        priority_queue<pair<int,string>, vector<pair<int, string>>, cmp> pq; 

        for(auto it : mymap){
            pq.push({it.second, it.first});

            if(pq.size()>k){
                pq.pop();
            }
        }
      
        vector<string>ans;

        while(pq.size()>0){ 
            ans.push_back(pq.top().second);
            pq.pop();

        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};